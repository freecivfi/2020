diff -purN freeciv-2.6.2.1-orig/server/generator/mapgen.c freeciv-2.6.2.1-hmap_shore_level/server/generator/mapgen.c
--- freeciv-2.6.2.1-orig/server/generator/mapgen.c	2020-11-27 12:12:11.000000000 +0000
+++ freeciv-2.6.2.1-hmap_shore_level/server/generator/mapgen.c	2020-11-28 16:53:31.394964544 +0000
@@ -50,6 +50,8 @@ static void mapgenerator3(void);
 static void mapgenerator4(void);
 static bool map_generate_fair_islands(void);
 static void adjust_terrain_param(void);
+static int count_tiles_over_hmap_level(int level);
+static int solve_hmap_level(int percent, int min_level, int max_level, int max_tiles);
 
 /* common variables for generator 2, 3 and 4 */
 struct gen234_state {
@@ -267,23 +269,42 @@ static struct tile *rand_map_pos_charact
 }
 
 /**************************************************************************
-  we don't want huge areas of hill/mountains, 
-  so we put in a plains here and there, where it gets too 'heigh' 
-
-  Return TRUE if the terrain at the given map position is too heigh.
+  Return TRUE if the surrounding terrain at the given map position is "flat".
+  Meaning that the level of the terrain is close to surrounding terrains.
 ****************************************************************************/
-static bool terrain_is_too_high(struct tile *ptile,
-                                int thill, int my_height)
+static bool terrain_is_flat(struct tile *ptile, int precision)
 {
+  int tiles = 0;
   square_iterate(ptile, 1, tile1) {
-    if (hmap(tile1) + (hmap_max_level - hmap_mountain_level) / 5 < thill) {
-      return FALSE;
+    if( hmap(tile1)/MAX(1, precision) == hmap(ptile)/MAX(1, precision) ) {
+      tiles++; 
     }
   } square_iterate_end;
-  return TRUE;
+  if(tiles < 6) {
+    return FALSE;
+  } else {
+    return TRUE;
+  }
 }
 
 /**************************************************************************
+  we don't want huge areas of hill/mountains, 
+  so we put in a plains here and there, where it gets too 'heigh' 
+
+  Return TRUE if the terrain at the given map position is too heigh.
+****************************************************************************/
+//static bool terrain_is_too_high(struct tile *ptile,
+//                                int thill, int my_height)
+//{
+//  square_iterate(ptile, 1, tile1) {
+//    if (hmap(tile1) + (hmap_max_level - hmap_mountain_level) / 5 < thill) {
+//      return FALSE;
+//    }
+//  } square_iterate_end;
+//  return TRUE;
+//}
+
+/**************************************************************************
   make_relief() will convert all squares that are higher than thill to
   mountains and hills. Note that thill will be adjusted according to
   the map.server.steepness value, so increasing map.mountains will result
@@ -291,20 +312,45 @@ static bool terrain_is_too_high(struct t
 **************************************************************************/
 static void make_relief(void)
 {
+  int land_tiles, mountain_tiles, higher_mountain_level, flatness_precision;
   /* Calculate the mountain level.  map.server.mountains specifies the
    * percentage of land that is turned into hills and mountains. */
-  hmap_mountain_level = (((hmap_max_level - hmap_shore_level)
-                          * (100 - game.map.server.steepness))
-                         / 100 + hmap_shore_level);
+  land_tiles = count_tiles_over_hmap_level(hmap_shore_level);
+  hmap_mountain_level = solve_hmap_level(game.map.server.steepness, hmap_shore_level, hmap_max_level, land_tiles );
+  mountain_tiles = count_tiles_over_hmap_level(hmap_mountain_level);
+  higher_mountain_level = solve_hmap_level(10, hmap_mountain_level, hmap_max_level, mountain_tiles );
+  flatness_precision = MAX(1, (higher_mountain_level - hmap_mountain_level) / 10);
 
   whole_map_iterate(ptile) {
-    if (not_placed(ptile)
-        && ((hmap_mountain_level < hmap(ptile)
-             && (fc_rand(10) > 5
-                 || !terrain_is_too_high(ptile, hmap_mountain_level,
-                                         hmap(ptile))))
-            || area_is_too_flat(ptile, hmap_mountain_level, hmap(ptile)))) {
-      if (tmap_is(ptile, TT_HOT)) {
+
+    // FIXME: Do we need to take `not_placed(ptile)` in account at count_tiles_over_hmap_level()?
+    // FIXME: Either implement `terrain_is_too_high()` and `area_is_too_flat()` when solving hmap_mountain_level or don't use at all.
+    if (
+      not_placed(ptile)
+      && (
+        (
+          hmap_mountain_level < hmap(ptile)
+          && (
+            higher_mountain_level < hmap(ptile)
+            || (!terrain_is_flat(ptile, flatness_precision))
+          )
+          && (
+            fc_rand(10) > 5
+            //|| !terrain_is_too_high(ptile, hmap_mountain_level, hmap(ptile))
+          )
+        )
+        //|| area_is_too_flat(ptile, hmap_mountain_level, hmap(ptile))
+      )
+    ) {
+
+      if(higher_mountain_level < hmap(ptile)) {
+        /* Prefer mountains to hills in higher levels. */
+        tile_set_terrain(ptile,
+                         pick_terrain(MG_MOUNTAINOUS, MG_UNUSED,
+                                      fc_rand(10) < 8 ? MG_GREEN : MG_UNUSED));
+
+      } else if (tmap_is(ptile, TT_HOT)) {
+
         /* Prefer hills to mountains in hot regions. */
         tile_set_terrain(ptile,
                          pick_terrain(MG_MOUNTAINOUS, fc_rand(10) < 4
@@ -1033,6 +1079,60 @@ static void make_rivers(void)
 }
 
 /**************************************************************************
+  Count the amount of tiles for specified shore level.
+**************************************************************************/
+static int count_tiles_over_hmap_level(int level)
+{
+  int tiles = 0;
+  whole_map_iterate(ptile) {
+    if (hmap(ptile) >= level) {
+		tiles++;
+    }
+  } whole_map_iterate_end;
+  return tiles;
+}
+
+/**************************************************************************
+  Search hmap_shore_level between min_level and max_level which has 
+  specified percent of tiles using binary search algorithm.
+**************************************************************************/
+static int solve_hmap_level(int percent, int min_level, int max_level, int max_tiles)
+{
+	int result, level, last_level;
+
+	result = -1;
+	last_level = -1;
+	level = min_level + (max_level - min_level)/2;
+
+	do {
+		result = count_tiles_over_hmap_level( level ) * 100 / max_tiles;
+
+	    log_debug("Found height level %d with %d%% of tiles (%d%% requested).", level, result, percent);
+
+		// If the level has less tiles than requested, then we need more tiles, so lets lower the level
+		if(result < percent) {
+			max_level = level;
+			last_level = level;
+			level = min_level + (max_level - min_level)/2;
+
+		// If the level has more tiles than requested, then we need less tiles, so lets rise the level
+		} else if(result > percent) {
+			min_level = level;
+			last_level = level;
+			level = min_level + (max_level - min_level)/2;
+		}
+	} while(!( (result == percent) || (last_level == level) || (min_level == max_level) ));
+	if(result != percent) {
+		log_normal(_("Using closest found height level with %d%% tiles (%d%% requested)."),
+			result, percent);
+	} else {
+		log_debug(_("Using height level with %d%% tiles (%d%% requested)."),
+			result, percent);
+	}
+	return level;
+}
+
+/**************************************************************************
   make land simply does it all based on a generated heightmap
   1) with map.server.landpercent it generates a ocean/unknown map
   2) it then calls the above functions to generate the different terrains
@@ -1064,7 +1164,7 @@ static void make_land(void)
                      "ruleset, or use a different map generator. If this "
                      "error persists, please report it at: %s", BUG_URL);
 
-  hmap_shore_level = (hmap_max_level * (100 - game.map.server.landpercent)) / 100;
+  hmap_shore_level = solve_hmap_level(game.map.server.landpercent, 0, hmap_max_level, MAP_INDEX_SIZE);
   ini_hmap_low_level();
   whole_map_iterate(ptile) {
     tile_set_terrain(ptile, T_UNKNOWN); /* set as oceans count is used */
